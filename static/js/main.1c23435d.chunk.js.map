{"version":3,"sources":["logo.svg","Firebase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","addDocToArr","a","doc","docs","push","id","db","firebase","firestore","collection","get","snapshot","map","List","props","listItems","data","className","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","state","this","getDataFromFirebase","getData","then","arr","console","log","setState","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"iLAAAA,EAAOC,QAAU,IAA0B,kC,4OCepC,uBAIIC,EAJJ,SAAAC,EAAA,6DAIID,EAJJ,SAIgBE,GACnBC,EAAKC,KAAKF,EAAIG,KAJZC,EAAKC,IAASC,YAAYC,WAAW,QADpC,SAEgBH,EAAGI,MAFnB,cAEDC,EAFC,OAGDR,EAAO,GAIXQ,EAASR,KAAKS,IAAIZ,GAPb,kBASEG,GATF,4C,sBCVP,SAASU,EAAKC,GACZ,IACMC,EADOD,EAAME,KACIJ,KAAI,SAACV,GAAD,OACzB,wBAAIe,UAAU,QACZ,4BAAKf,OAGT,OAAO,4BAAKa,GDCdR,IAASW,cAVY,CACnBC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,cACnBC,MAAO,6C,IC+BMC,E,kDAzBb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IACDa,MAAQ,CACXxB,KAAM,IAHS,E,qDAQjB,OADAyB,KAAKC,sBAEH,yBAAKZ,UAAU,OACb,kBAACJ,EAAD,CAAMG,KAAMY,KAAKD,MAAMxB,U,4CAKN,IAAD,QDhBjB,WAAP,gCCiBI2B,GAAUC,MAAK,SAACC,GACdC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CACZhC,KAAM6B,W,GApBII,IAAMC,WCHJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.1c23435d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import firebase from \"firebase\";\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyC9MzRckhT5lWCz_0SYjWoPBWtYGZ-e1Jw\",\n  authDomain: \"mvrt-side-project.firebaseapp.com\",\n  databaseURL: \"https://mvrt-side-project.firebaseio.com\",\n  projectId: \"mvrt-side-project\",\n  storageBucket: \"mvrt-side-project.appspot.com\",\n  messagingSenderId: \"57986287092\",\n  appId: \"1:57986287092:web:130116c11bcec71883a5a1\",\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\n\nexport async function getData() {\n  let db = firebase.firestore().collection(\"data\");\n  let snapshot = await db.get();\n  let docs = [];\n  function addDocToArr(doc) {\n    docs.push(doc.id);\n  }\n  snapshot.docs.map(addDocToArr);\n  //console.log(docs);\n  return docs;\n}\n","import React from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport { getData } from \"./Firebase\";\n\nfunction List(props) {\n  const data = props.data;\n  const listItems = data.map((doc) => (\n    <li className=\"List\">\n      <h1>{doc}</h1>\n    </li>\n  ));\n  return <ul>{listItems}</ul>;\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      docs: [],\n    };\n  }\n  render() {\n    this.getDataFromFirebase();\n    return (\n      <div className=\"App\">\n        <List data={this.state.docs} />\n      </div>\n    );\n  }\n\n  getDataFromFirebase() {\n    getData().then((arr) => {\n      console.log(arr);\n      this.setState({\n        docs: arr,\n      });\n    });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}